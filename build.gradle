plugins {
  id 'org.owasp.dependencycheck' version '3.1.2'
  id 'com.github.ben-manes.versions' version '0.17.0'
}

allprojects {
  group 'com.github.hmcts.java-logging'
  version "${version}"

  apply plugin: 'java'
  apply plugin: 'java-library'
  apply plugin: 'maven'
  apply plugin: 'maven-publish'
  apply plugin: 'checkstyle'
  apply plugin: 'jacoco'
  apply plugin: 'com.github.ben-manes.versions'
  apply plugin: 'pmd'

  checkstyle {
    toolVersion = '8.9'
    maxWarnings = 0
    configDir = new File(rootDir, "config/checkstyle")
  }

  pmd {
    toolVersion = "5.8.1"
    sourceSets = [sourceSets.main, sourceSets.test]
    reportsDir = file("$rootProject.buildDir/reports/pmd/$project.name")
    ruleSetFiles = files("$rootProject.projectDir/config/pmd/ruleset.xml")
  }

  sourceCompatibility = 1.8

  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "https://maven.pkg.github.com/hmcts/service-auth-provider-java-client"
    }
  }

  configurations.all {
    resolutionStrategy {
      force "com.google.guava:guava:27.0.1-jre"
    }
  }

  dependencies {
    compile group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '5.2'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.25'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
    testCompile group: 'junit', name: 'junit', version: '4.12'
  }

  dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
      rules.all { ComponentSelection selection ->
        boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
          selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
        }
        if (rejected) {
          selection.reject('Release candidate')
        }
      }
    }
  }

  dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = "$rootDir/config/owasp/suppressions.xml"
  }
}

task codeCoverageReport(type: JacocoReport, dependsOn: allprojects*.test) {

  // Gather execution data from all subprojects
  // (change this if you e.g. want to calculate unit test/integration test coverage separately)
  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

  // Add all relevant sourcesets from the subprojects
  allprojects.each {
    sourceSets it.sourceSets.main
  }

  reports {
    csv.enabled = false
    html.enabled = true
    html.destination = file("${buildDir}/reports/jacoco/html")
    xml.enabled = true
    xml.destination = file("${buildDir}/reports/jacoco/jacocoTestReport.xml")
  }
}

publishing {
  publications {
    Main(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
      groupId project.group
      artifactId 'logging'
      version project.version
    }
  }
  repositories {
    maven {
      name = "AzureArtifacts"
      url = uri("https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1")
      credentials {
        username = System.getenv("AZURE_DEVOPS_ARTIFACT_USERNAME")
        password = System.getenv("AZURE_DEVOPS_ARTIFACT_TOKEN")
      }
    }
  }
}

dependencies {
  testCompile group: 'org.mockito', name: 'mockito-core', version: '2.23.4'
  testCompile group: 'org.assertj', name: 'assertj-core', version: '3.11.1'
  testCompile group: 'com.github.stefanbirkner', name: 'system-rules', version: '1.19.0'
  testCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
  testCompile group: 'com.google.code.tempus-fugit', name: 'tempus-fugit', version: '1.1'
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}
