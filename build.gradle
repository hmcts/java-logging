buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
  }
}

plugins {
  id 'org.owasp.dependencycheck' version '1.4.5.1'
}

allprojects {
  group 'uk.gov.hmcts.reform'
  version '1.2.2'

  apply plugin: 'java'
  apply plugin: 'java-library'
  apply plugin: 'maven'
  apply plugin: 'maven-publish'
  apply plugin: 'checkstyle'
  apply plugin: 'com.jfrog.bintray'
  apply plugin: 'jacoco'

  checkstyle.toolVersion = '7.2'
  checkstyle.configFile = new File(rootDir, "checkstyle.xml")

  // make build fail on Checkstyle issues (https://github.com/gradle/gradle/issues/881)
  tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
      reports.all { report ->
        def outputFile = report.destination
        if (outputFile.exists() && outputFile.text.contains("<error ")) {
          throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
        }
      }
    }
  }

  sourceCompatibility = 1.8

  repositories {
    jcenter()
  }

  def versions = [
    slf4j: '1.7.18',
    logstashLogbackEncoder: '4.11'
  ]

  dependencies {
    compile group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: versions.logstashLogbackEncoder
    compile group: 'org.slf4j', name: 'slf4j-api', version: versions.slf4j
    compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
  }

  dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
  }
}

task codeCoverageReport(type: JacocoReport, dependsOn: allprojects*.test) {

  // Gather execution data from all subprojects
  // (change this if you e.g. want to calculate unit test/integration test coverage separately)
  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

  // Add all relevant sourcesets from the subprojects
  allprojects.each {
    sourceSets it.sourceSets.main
  }

  reports {
    csv.enabled = false
    html.enabled = true
    html.destination = file("${buildDir}/reports/jacoco/html")
    xml.enabled = true
    xml.destination = file("${buildDir}/reports/jacoco/jacocoTestReport.xml")
  }
}

publishing {
  publications {
    Main(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
      groupId project.group
      artifactId 'java-logging'
      version project.version
    }
  }
}

bintray {
  user = System.getenv('BINTRAY_USER')
  key = System.getenv('BINTRAY_KEY')
  publications = ['Main']
  publish = true
  pkg {
    repo = 'hmcts-maven'
    name = 'java-logging'
    userOrg = 'hmcts'
    licenses = ['MIT']
    vcsUrl = 'https://github.com/hmcts/java-logging'
    version {
      name = project.version
    }
  }
}

dependencies {
  testCompile group: 'junit', name: 'junit', version: '4.12'
  testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
  testCompile group: 'org.assertj', name: 'assertj-core', version: '3.6.2'
  testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.10'
  testCompile group: 'com.github.stefanbirkner', name: 'system-rules', version: '1.16.1'
  testCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}
